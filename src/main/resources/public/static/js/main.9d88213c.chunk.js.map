{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","WebMapping","handler","predicate","details","requestMappingConditions","methods","patterns","App","useState","mappings","setMappings","appHealth","setAppHealth","useEffect","fetch","then","r","json","className","href","target","rel","JSON","stringify","filter","m","map","mapping","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oIAAAA,EAAOC,QAAU,IAA0B,kC,wGCKrCC,G,YAAa,SAAC,GAA6E,IAA5EC,EAA2E,EAA3EA,QAAQC,EAAmE,EAAnEA,UAAmE,IAAzDC,QAASC,yBAA0BC,EAAsB,EAAtBA,QAAQC,EAAc,EAAdA,SAC9E,OAAO,6BACH,6BAAML,GACN,6BAAMC,GACN,6BAAMG,GACN,6BAAMC,MAqDCC,MA9Cf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACPC,EADO,KACEC,EADF,OAEmBF,mBAAS,IAF5B,mBAEPG,EAFO,KAEGC,EAFH,KAQb,OALCC,qBAAU,WACTC,MAAM,sBAAsBC,MAAK,SAAAC,GAAC,OAAEA,EAAEC,UAAQF,MAAK,SAAAC,GAAC,OAAEN,EAAYM,EAAC,SAAD,6DAClEF,MAAM,oBAAoBC,MAAK,SAAAC,GAAC,OAAEA,EAAEC,UAAQF,MAAK,SAAAC,GAAC,OAAEJ,EAAaI,QAEhE,IAED,yBAAKE,UAAU,OACb,4BAAQA,UAAU,cAChB,gGAGA,uBACEA,UAAU,WACVC,KAAK,wBACLC,OAAO,SACPC,IAAI,uBAJN,yBAQA,6BACA,uBACEH,UAAU,WACVC,KAAK,yBACLC,OAAO,SACPC,IAAI,uBAJN,wBASF,yBAAKH,UAAU,mBACb,yBAAKA,UAAU,uBACL,0CACCI,KAAKC,UAAUZ,IAE1B,yBAAKO,UAAU,yBACX,4CACCT,EAASe,QAAO,SAAAC,GAAC,OAAe,MAAbA,EAAEtB,WAAiBuB,KAAI,SAAAC,GAAO,OAAE,oCAAE,kBAAC,EAAeA,GAAU,qCC5CxEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9d88213c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nconst WebMapping = ({handler,predicate,details:{requestMappingConditions:{methods,patterns}}})=>{\n    return <div>\n        <div>{handler}</div>\n        <div>{predicate}</div>\n        <div>{methods}</div>\n        <div>{patterns}</div>\n\n\n\n    </div>\n}\n\nfunction App() {\n   let [mappings,setMappings] = useState([]);\n   let [appHealth,setAppHealth] = useState([]);\n   useEffect(()=>{\n    fetch(\"/actuator/mappings\").then(r=>r.json()).then(r=>setMappings(r['contexts']['ExampleApp']['mappings']['dispatcherServlets']['dispatcherServlet']))\n    fetch(\"/actuator/health\").then(r=>r.json()).then(r=>setAppHealth(r))\n\n   },[])\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          A Example Application With RabbitMQ Kafka MariaDb and Spring Boot\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"http://localhost:9999\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Adminer DB Management\n        </a>\n        <br/>\n        <a\n          className=\"App-link\"\n          href=\"http://localhost:15672\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          RabbitMQ Management\n        </a>\n      </header>\n      <div className=\"App-health-view\">\n        <div className=\"App-Actuator-Health\">\n                  <h2>App Health</h2>\n                  {JSON.stringify(appHealth)}\n        </div>\n        <div className=\"App-Actuator-Mappings\">\n            <h2>App Mappings</h2>\n            {mappings.filter(m=>m.details != null).map(mapping=><><WebMapping {...mapping}/><br/></>)}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}