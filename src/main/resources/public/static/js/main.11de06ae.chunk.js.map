{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","WebMapping","handler","predicate","details","requestMappingConditions","methods","patterns","style","display","justifyContent","map","method","margin","padding","borderRadius","backgroundColor","maxWidth","minWidth","App","useState","mappings","setMappings","appHealth","setAppHealth","useEffect","fetch","then","r","json","className","href","target","rel","JSON","stringify","filter","m","mapping","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oIAAAA,EAAOC,QAAU,IAA0B,kC,wGCIrCC,G,YAAa,SAAC,GAMd,EALJC,QAKI,EAJJC,UAIK,IAAD,IAHJC,QACEC,yBAA4BC,EAE1B,EAF0BA,QAASC,EAEnC,EAFmCA,SAGvC,OACE,yBAAKC,MAAO,CAAEC,QAAS,OAAQC,eAAgB,WAC5CJ,EAAQK,KAAI,SAAAC,GACX,OACE,yBACEJ,MAAO,CACLK,OAAQ,GACRC,QAAS,EACTC,aAAc,EACdC,gBACY,OAAVJ,EACI,QACU,QAAVA,EACA,SACU,UAAVA,EACA,MACA,OACNK,SAAU,MAGXL,MAIP,yBAAKJ,MAAO,CAAEK,OAAQ,GAAII,SAAU,IAAKC,SAAU,MAAQX,MA+ElDY,MA1Ef,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACRC,EADQ,KACEC,EADF,OAEmBF,mBAAS,IAF5B,mBAERG,EAFQ,KAEGC,EAFH,KAiBb,OAdAC,qBAAU,WACRC,MAAM,sBACHC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAC,GAAC,OACLN,EACEM,EAAC,SAAD,6DAKNF,MAAM,oBACHC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAC,GAAC,OAAIJ,EAAaI,QACzB,IAED,yBAAKE,UAAU,OACb,4BAAQA,UAAU,cAChB,gGACA,uBACEA,UAAU,WACVC,KAAK,wBACLC,OAAO,SACPC,IAAI,uBAJN,yBAQA,6BACA,uBACEH,UAAU,WACVC,KAAK,yBACLC,OAAO,SACPC,IAAI,uBAJN,uBAQA,6BACA,uBACEH,UAAU,WACVC,KAAK,wBACLC,OAAO,SACPC,IAAI,uBAJN,uBASF,yBAAKH,UAAU,mBACb,yBAAKA,UAAU,uBACb,6BACA,0CACCI,KAAKC,UAAUZ,GAChB,6BACA,8BAEF,yBAAKO,UAAU,yBACb,6BACA,4CACA,6BACCT,EACEe,QAAO,SAAAC,GAAC,OAAiB,MAAbA,EAAEjC,WACdO,KAAI,SAAA2B,GAAO,OACV,oCACE,kBAAC,EAAeA,GAChB,qCC7FIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.11de06ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nconst WebMapping = ({\n  handler,\n  predicate,\n  details: {\n    requestMappingConditions: { methods, patterns }\n  }\n}) => {\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n      {methods.map(method => {\n        return (\n          <div\n            style={{\n              margin: 10,\n              padding: 5,\n              borderRadius: 5,\n              backgroundColor:\n                method == \"GET\"\n                  ? \"green\"\n                  : method == \"POST\"\n                  ? \"orange\"\n                  : method == \"DELETE\"\n                  ? \"red\"\n                  : \"grey\",\n              maxWidth: 100\n            }}\n          >\n            {method}\n          </div>\n        );\n      })}\n      <div style={{ margin: 10, maxWidth: 300, minWidth: 300 }}>{patterns}</div>\n    </div>\n  );\n};\n\nfunction App() {\n  let [mappings, setMappings] = useState([]);\n  let [appHealth, setAppHealth] = useState([]);\n  useEffect(() => {\n    fetch(\"/actuator/mappings\")\n      .then(r => r.json())\n      .then(r =>\n        setMappings(\n          r[\"contexts\"][\"ExampleApp\"][\"mappings\"][\"dispatcherServlets\"][\n            \"dispatcherServlet\"\n          ]\n        )\n      );\n    fetch(\"/actuator/health\")\n      .then(r => r.json())\n      .then(r => setAppHealth(r));\n  }, []);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>A Example Application With RabbitMQ Kafka MariaDb and Spring Boot</p>\n        <a\n          className=\"App-link\"\n          href=\"http://localhost:9999\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Adminer DB Management\n        </a>\n        <br />\n        <a\n          className=\"App-link\"\n          href=\"http://localhost:15672\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          RabbitMQ Management\n        </a>\n        <br />\n        <a\n          className=\"App-link\"\n          href=\"http://localhost:9998\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          MailHog Management\n        </a>\n      </header>\n      <div className=\"App-health-view\">\n        <div className=\"App-Actuator-Health\">\n          <br></br>\n          <h2>App Health</h2>\n          {JSON.stringify(appHealth)}\n          <br></br>\n          <br></br>\n        </div>\n        <div className=\"App-Actuator-Mappings\">\n          <br></br>\n          <h2>App Mappings</h2>\n          <br></br>\n          {mappings\n            .filter(m => m.details != null)\n            .map(mapping => (\n              <>\n                <WebMapping {...mapping} />\n                <br />\n              </>\n            ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}